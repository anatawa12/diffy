(function() {var implementors = {};
implementors["diffy"] = [{"text":"impl Debug for ApplyError","synthetic":false,"types":[]},{"text":"impl Debug for DiffOptions","synthetic":false,"types":[]},{"text":"impl Debug for ConflictStyle","synthetic":false,"types":[]},{"text":"impl Debug for MergeOptions","synthetic":false,"types":[]},{"text":"impl Debug for PatchFormatter","synthetic":false,"types":[]},{"text":"impl Debug for ParsePatchError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, O, '_&gt; Debug for Patch&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ToOwned&lt;Owned = O&gt; + Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Borrow&lt;T&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + ?Sized&gt; Debug for Hunk&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for HunkRange","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug + ?Sized&gt; Debug for Line&lt;'a, T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()